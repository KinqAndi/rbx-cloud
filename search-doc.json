[{"title":"📦 Download Package","type":0,"sectionRef":"#","url":"/rbx-cloud/docs/Download Package","content":"","keywords":""},{"title":"🟢 Install with Wally​","type":1,"pageTitle":"📦 Download Package","url":"/rbx-cloud/docs/Download Package#-install-with-wally","content":"Wally is a package manager for Roblox that allows you to easily add dependencies to your projects. To use this package, follow these steps: 1. Install Wally​ If you haven't already installed Wally, follow the installation instructions here. 2. Add the Package to wally.toml​ Open your wally.toml file and add the following dependency: [dependencies] PackageName = &quot;kinqandi/addy@0.0.1&quot;  "},{"title":"🔴 Downloading From Roblox Studio​","type":1,"pageTitle":"📦 Download Package","url":"/rbx-cloud/docs/Download Package#-downloading-from-roblox-studio","content":"Download from here. "},{"title":"🛠️ Rbx-Cloud Setup Guide","type":0,"sectionRef":"#","url":"/rbx-cloud/docs/intro","content":"","keywords":""},{"title":"Step-by-Step Instructions:​","type":1,"pageTitle":"🛠️ Rbx-Cloud Setup Guide","url":"/rbx-cloud/docs/intro#step-by-step-instructions","content":"Go to Rbx-Cloud: Navigate to our website to begin.Authenticate with Roblox: Log in using Roblox Oauth to link your projects.Add a Project: Once authenticated, click on &quot;Add Project&quot; to create your new project.Select Entity Owner: Choose the owner of the entity (either you or a group) (You must own the group/experience, and the experience must be public for it to be generated).Select Game: Pick the game you want to manage from the list of owned games.Submit: After selecting the game, hit &quot;Submit&quot; to proceed.Checkout the API:  IMPORTANT After submitting, you will see a authentication token. Copy this token, as it will be necessary for API access. WARNING 🚨 Do not share this token with anyone! Keeping it private ensures your project remains secure. "},{"title":"🌩️ Addy","type":0,"sectionRef":"#","url":"/rbx-cloud/docs/Usage Example","content":"","keywords":""},{"title":"📦 Installation​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#-installation","content":"You can install the Addy package either via Wally or directly from the Roblox Toolbox (Tutorial Here) "},{"title":"📖 Usage Example ​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#-usage-example-go-to-api","content":""},{"title":"Creating an Instance of Addy​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#creating-an-instance-of-addy","content":"To get started, create a new instance of the Addy class using your cloud configuration: local Addy = require(Packages.Addy) local cloudConfig = { universeId = 123456789, authToken = &quot;your-auth-token&quot;, CloudConfigEnum = Addy.CloudConfigEnums.SerialIndex, MaxRetries = 3, RetryDelay = 5, } local addyInstance = Addy.new(cloudConfig)  "},{"title":"Retrieving a Serial Number​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#retrieving-a-serial-number","content":"You can retrieve a serial number for a unique ID using the GetSerial method: local uniqueId = &quot;item12345&quot; addyInstance:GetSerial(uniqueId):andThen(function(serialNumber) print(&quot;Serial number for &quot; .. uniqueId .. &quot;: &quot; .. serialNumber) end):catch(function(error) warn(&quot;Failed to retrieve serial: &quot; .. error) end)  "},{"title":"Retrieving Multiple Serial Numbers (Bulk)​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#retrieving-multiple-serial-numbers-bulk","content":"You can retrieve serial numbers for multiple unique IDs using GetBulkSerial: local uniqueIds = {&quot;item12345&quot;, &quot;item67890&quot;, &quot;item111213&quot;} addyInstance:GetBulkSerial(uniqueIds):andThen(function(serialNumbers) for i, serial in ipairs(serialNumbers) do print(&quot;Serial for &quot; .. uniqueIds[i] .. &quot;: &quot; .. serial) end end):catch(function(error) warn(&quot;Failed to retrieve serials: &quot; .. error) end)  "},{"title":"Synchronous Retrieval (Optional)​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#synchronous-retrieval-optional","content":"If you prefer synchronous operations, you can use the GetSerialAsync and GetBulkSerialAsync methods: local serial = addyInstance:GetSerialAsync(&quot;item12345&quot;) print(&quot;Synchronous serial number: &quot; .. (serial or &quot;Failed&quot;)) local bulkSerials = addyInstance:GetBulkSerialAsync({&quot;item12345&quot;, &quot;item67890&quot;}) print(&quot;Synchronous bulk serials: &quot;, bulkSerials)  "},{"title":"Cleanup​","type":1,"pageTitle":"🌩️ Addy","url":"/rbx-cloud/docs/Usage Example#cleanup","content":"Once you're done with the Addy instance, make sure to properly clean it up: addyInstance:Destroy()  "},{"title":"Addy","type":0,"sectionRef":"#","url":"/rbx-cloud/api/Addy","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#types","content":" "},{"title":"CloudConfigEnum​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#CloudConfigEnum","content":"&lt;/&gt; type CloudConfigEnum = number Represents a valid enum type for the cloud configuration.  "},{"title":"CloudConfig​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#CloudConfig","content":"&lt;/&gt; type CloudConfig = { universeId: number, authToken: string, CloudConfigEnum: CloudConfigEnum, MaxRetries: number?, RetryDelay: number? } Contains the configuration for the cloud services. "},{"title":"Properties​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#properties","content":" "},{"title":"CloudConfigEnums​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#CloudConfigEnums","content":"&lt;/&gt; Addy.CloudConfigEnums: {SerialNumber: 1} Table containing cloud configuration enums used for validation. "},{"title":"Functions​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#new","content":"&lt;/&gt; Addy.new( cloudConfig: CloudConfig,-- The configuration details for the cloud. baseUrl: string?-- (Optional) The base URL of the cloud service. Defaults to &quot;https://www.rbx-cloud.com/&quot;. ) → Addy-- A new instance of the Addy class. Usage Example local Addy = require(Packages.Addy) local cloudConfig = { universeId = 123456789, authToken = &quot;your-auth-token&quot;, CloudConfigEnum = Addy.CloudConfigEnums.SerialIndex, MaxRetries = 3, RetryDelay = 5, } local addyInstance = Addy.new(cloudConfig)   "},{"title":"GetSerial​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#GetSerial","content":"&lt;/&gt; Addy:GetSerial( uniqueId: string,-- The unique identifier for which the serial is requested. dontIncrement: boolean?-- (Optional) If true, the serial number is not incremented. ) → Promise&lt;number&gt;-- A promise that resolves with the serial number. You can retrieve a serial number for a unique ID using the GetSerial method: Usage Example local uniqueId = &quot;item12345&quot; addyInstance:GetSerial(uniqueId):andThen(function(serialNumber) print(&quot;Serial number for &quot; .. uniqueId .. &quot;: &quot; .. serialNumber) end):catch(function(error) warn(&quot;Failed to retrieve serial: &quot; .. error) end)   "},{"title":"GetBulkSerial​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#GetBulkSerial","content":"&lt;/&gt; Addy:GetBulkSerial( uniqueIds: {string}, dontIncrement: boolean?-- (Optional) If true, the serial numbers are not incremented. ) → Promise&lt;{number}&gt;-- A promise that resolves with a list of serial numbers. Retrieves serial numbers in bulk for multiple unique IDs from the cloud. You can retrieve serial numbers for multiple unique IDs using GetBulkSerial: local uniqueIds = {&quot;item12345&quot;, &quot;item67890&quot;, &quot;item111213&quot;} addyInstance:GetBulkSerial(uniqueIds):andThen(function(serialNumbers) for i, serial in ipairs(serialNumbers) do print(&quot;Serial for &quot; .. uniqueIds[i] .. &quot;: &quot; .. serial) end end):catch(function(error) warn(&quot;Failed to retrieve serials: &quot; .. error) end)   "},{"title":"GetSerialAsync​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#GetSerialAsync","content":"&lt;/&gt; Addy:GetSerialAsync( uniqueId: string,-- The unique identifier for which the serial is requested. dontIncrement: boolean?-- (Optional) If true, the serial number is not incremented. ) → number?-- The serial number, or nil if the operation fails. If you prefer synchronous operations, you can use the GetSerialAsync and GetBulkSerialAsync methods: local serial = addyInstance:GetSerialAsync(&quot;item12345&quot;) print(&quot;Synchronous serial number: &quot; .. (serial or &quot;Failed&quot;)) local bulkSerials = addyInstance:GetBulkSerialAsync({&quot;item12345&quot;, &quot;item67890&quot;}) print(&quot;Synchronous bulk serials: &quot;, bulkSerials)   "},{"title":"GetBulkSerialAsync​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#GetBulkSerialAsync","content":"&lt;/&gt; Addy:GetBulkSerialAsync( uniqueIds: {string},-- A list of unique IDs for which the serials are requested. dontIncrement: boolean?-- (Optional) If true, the serial numbers are not incremented. ) → number?-- The serial numbers, or nil if the operation fails. Retrieves serial numbers in bulk for multiple unique IDs synchronously.  "},{"title":"Destroy​","type":1,"pageTitle":"Addy","url":"/rbx-cloud/api/Addy#Destroy","content":"&lt;/&gt; Addy:Destroy() → () Cleans up and destroys the Addy instance. "}]