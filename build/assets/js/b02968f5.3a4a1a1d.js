"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22],{40197:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"#### Usage Example\\n\\n ```lua\\nlocal Addy = require(Packages.Addy)\\n\\nlocal cloudConfig = {\\n    universeId = 123456789,\\n    authToken = \\"your-auth-token\\",\\n    CloudConfigEnum = Addy.CloudConfigEnums.SerialIndex,\\n    MaxRetries = 3,\\n    RetryDelay = 5,\\n}\\n\\nlocal addyInstance = Addy.new(cloudConfig)\\n```","params":[{"name":"cloudConfig","desc":"The configuration details for the cloud.","lua_type":"CloudConfig"},{"name":"baseUrl","desc":"(Optional) The base URL of the cloud service. Defaults to `\\"https://www.rbx-cloud.com/\\"`.","lua_type":"string?"}],"returns":[{"desc":"A new instance of the `Addy` class.","lua_type":"Addy"}],"function_type":"static","source":{"line":77,"path":"src/addy/init.lua"}},{"name":"GetSerial","desc":"You can retrieve a serial number for a unique ID using the `GetSerial` method:\\n\\n#### Usage Example\\n```lua\\nlocal uniqueId = \\"item12345\\"\\naddyInstance:GetSerial(uniqueId):andThen(function(serialNumber)\\n    print(\\"Serial number for \\" .. uniqueId .. \\": \\" .. serialNumber)\\nend):catch(function(error)\\n    warn(\\"Failed to retrieve serial: \\" .. error)\\nend)\\n```","params":[{"name":"uniqueId","desc":"The unique identifier for which the serial is requested.","lua_type":"string"},{"name":"dontIncrement","desc":"(Optional) If true, the serial number is not incremented.","lua_type":"boolean?"}],"returns":[{"desc":"A promise that resolves with the serial number.","lua_type":"Promise<number>"}],"function_type":"method","source":{"line":110,"path":"src/addy/init.lua"}},{"name":"GetBulkSerial","desc":"Retrieves serial numbers in bulk for multiple unique IDs from the cloud.\\n\\n#### You can retrieve serial numbers for multiple unique IDs using `GetBulkSerial`:\\n\\n```lua\\nlocal uniqueIds = {\\"item12345\\", \\"item67890\\", \\"item111213\\"}\\n\\naddyInstance:GetBulkSerial(uniqueIds):andThen(function(serialNumbers)\\n    for i, serial in ipairs(serialNumbers) do\\n        print(\\"Serial for \\" .. uniqueIds[i] .. \\": \\" .. serial)\\n    end\\nend):catch(function(error)\\n    warn(\\"Failed to retrieve serials: \\" .. error)\\nend)\\n```","params":[{"name":"uniqueIds","desc":"","lua_type":"{string}"},{"name":"dontIncrement","desc":"(Optional) If true, the serial numbers are not incremented.","lua_type":"boolean?"}],"returns":[{"desc":"A promise that resolves with a list of serial numbers.","lua_type":"Promise<{number}>"}],"function_type":"method","source":{"line":172,"path":"src/addy/init.lua"}},{"name":"GetSerialAsync","desc":"#### If you prefer synchronous operations, you can use the `GetSerialAsync` and `GetBulkSerialAsync` methods:\\n\\n```lua\\nlocal serial = addyInstance:GetSerialAsync(\\"item12345\\")\\nprint(\\"Synchronous serial number: \\" .. (serial or \\"Failed\\"))\\n\\nlocal bulkSerials = addyInstance:GetBulkSerialAsync({\\"item12345\\", \\"item67890\\"})\\nprint(\\"Synchronous bulk serials: \\", bulkSerials)\\n```","params":[{"name":"uniqueId","desc":"The unique identifier for which the serial is requested.","lua_type":"string"},{"name":"dontIncrement","desc":"(Optional) If true, the serial number is not incremented.","lua_type":"boolean?"}],"returns":[{"desc":"The serial number, or `nil` if the operation fails.","lua_type":"number?"}],"function_type":"method","source":{"line":238,"path":"src/addy/init.lua"}},{"name":"GetBulkSerialAsync","desc":"Retrieves serial numbers in bulk for multiple unique IDs synchronously.","params":[{"name":"uniqueIds","desc":"A list of unique IDs for which the serials are requested.","lua_type":"{string}"},{"name":"dontIncrement","desc":"(Optional) If true, the serial numbers are not incremented.","lua_type":"boolean?"}],"returns":[{"desc":"The serial numbers, or `nil` if the operation fails.","lua_type":"number?"}],"function_type":"method","source":{"line":249,"path":"src/addy/init.lua"}},{"name":"Destroy","desc":"Cleans up and destroys the Addy instance.","params":[],"returns":[],"function_type":"method","source":{"line":257,"path":"src/addy/init.lua"}}],"properties":[{"name":"CloudConfigEnums","desc":"Table containing cloud configuration enums used for validation.","lua_type":"{SerialNumber: 1}","source":{"line":48,"path":"src/addy/init.lua"}}],"types":[{"name":"CloudConfigEnum","desc":"Represents a valid enum type for the cloud configuration.","lua_type":"number","source":{"line":26,"path":"src/addy/init.lua"}},{"name":"CloudConfig","desc":"Contains the configuration for the cloud services.","lua_type":"{universeId: number,authToken: string, CloudConfigEnum: CloudConfigEnum, MaxRetries: number?, RetryDelay: number?}","source":{"line":35,"path":"src/addy/init.lua"}}],"name":"Addy","desc":"\ud83c\udf24\ufe0f The `Addy` class is responsible for managing rbx-cloud configurations\\nand interacting with rbx-cloud services.","source":{"line":14,"path":"src/addy/init.lua"}}')}}]);